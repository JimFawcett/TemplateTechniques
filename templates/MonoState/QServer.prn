#ifndef QUEUESERVER_H
#define QUEUESERVER_H
/////////////////////////////////////////////////////////////////////
// QServer.h - serves out references to a static queue             //
//                                                                 //
//     For each type T and for each integer qNum, we get           //
//     one QServer  class and one shared queue.                    //
//                                                                 //
// Jim Fawcett, CSE687 - Object Oriented Design, Spring 2004       //
/////////////////////////////////////////////////////////////////////
//
//  This class is an instance of the Monstate Pattern.
//  Monostate classes act like safe global data.  
//  - Their data is static and so shared by all users.
//  - Two pieces of code, in possibly different scopes, that 
//    create instances of the class, get access to the same
//    data without passing it into their scope by other means.
//  - Since the data is available through class member functions,
//    unlike global data, its access can be controlled, inputs 
//    validated, and usage logged.
//  - This particular class uses the T parameter to defer choice
//    of the queue contents until design of a using application.
//    T could be a double, as illustrated here, or perhaps an XML
//    Message.
//  - The integer template parameter is used to segregate user
//    sharing into groups.  All users of QServer<T,1> share the
//    same queue, but do not share a queue with users of
//    QServer<T,2>.
//  - Normally we share queues between threads, so to be useful,
//    this class would need to provide serialized access to its
//    queues, perhaps through a lock class based on critical 
//    sections.

#include <queue>  // STL container

template <typename T, int qNum> class QServer
{
public:
  std::queue<T>& get() { return _q; }
private:
  static std::queue<T> _q;
};

// define static member _q

template<typename T, int qNum> std::queue<T> QServer<T,qNum>::_q;

#endif
/////////////////////////////////////////////////////////////////////
// QServer.cpp - serves out references to a static queue           //
//                                                                 //
//     For each type T and for each integer qNum, we get           //
//     one QServer  class and one shared queue.                    //
//                                                                 //
// Jim Fawcett, CSE687 - Object Oriented Design, Spring 2004       //
/////////////////////////////////////////////////////////////////////

#include <iostream>
#include <iomanip>
#include "QServer.h"
using namespace std;

void PopAndShow(queue<double>& q)
{
  long save = cout.flags();    // save format state
  cout.flags(ios::showpoint);  // show decimal point
  cout.precision(3);           // show only 3 digits on right of decimal
  cout << "\n  " << setw(4) << q.front() << " : ";  
  q.pop(); 
  cout << "Q size = " << q.size();
  cout.flags(save);            // restore format state
}

int main()
{
  cout << "\n  Demonstrating Queue Server holding Static Queue "
       << "\n =================================================";

  // get shared queue

  queue<double> &q1 = QServer<double,1>().get();
  q1.push(1.0);
  q1.push(1.5);
  q1.push(2.0);

  // get shared queue again

  queue<double> &q2 = QServer<double,1>().get();
  q2.push(2.5);
  q2.push(3.0);
  q2.push(3.5);

  ///////////////////////////////////////////////////////////////////
  // QServer<double,2> is different class than QServer<double,1>
  // so static queue member is not shared between them.

  // get unshared queue

  queue<double> &q3 = QServer<double,2>().get();
  q3.push(-2.5);
  q3.push(-3.0);
  q3.push(-3.5);

  cout << "\n  ";
  while(q1.size() > 0)
    PopAndShow(q1);
  cout << "\n\n";

  while(q3.size() > 0)
    PopAndShow(q3);
  cout << "\n\n";
  return 0;
}
  Demonstrating Queue Server holding Static Queue 
 =================================================
  
  1.00 : Q size = 5
  1.50 : Q size = 4
  2.00 : Q size = 3
  2.50 : Q size = 2
  3.00 : Q size = 1
  3.50 : Q size = 0


  -2.50 : Q size = 2
  -3.00 : Q size = 1
  -3.50 : Q size = 0

